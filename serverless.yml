service: ucsc-food-ai-agent

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: us-east-1
    BEDROCK_MODEL_ID: anthropic.claude-3-sonnet-20240229-v1:0
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeAgent
            - bedrock:GetAgent
            - bedrock:ListAgents
            - dynamodb:*
            - s3:*
            - lex:*
            - comprehend:*
          Resource: "*"

functions:
  # AI Agent Functions
  foodAgent:
    handler: serverless/ai-agent.handler
    events:
      - http:
          path: /ai/chat
          method: post
          cors: true
  
  orderRecommendation:
    handler: serverless/recommendations.handler
    events:
      - http:
          path: /ai/recommend
          method: post
          cors: true
  
  naturalLanguageOrder:
    handler: serverless/nlp-order.handler
    events:
      - http:
          path: /ai/order
          method: post
          cors: true

  # Bedrock Agent Functions
  bedrockAgent:
    handler: serverless/bedrock-agent.handler
    events:
      - http:
          path: /ai/bedrock
          method: post
          cors: true

resources:
  Resources:
    # DynamoDB Tables for Agent Memory
    AgentMemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-agent-memory-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    # S3 Bucket for Agent Knowledge Base
    AgentKnowledgeBase:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-knowledge-base-${self:provider.stage}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

plugins:
  - serverless-offline